import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { ModificationType } from 'src/app/domain/models/motions/motions.constants';
import { djb2hash, splitStringKeepSeperator } from 'src/app/infrastructure/utils';
import * as DomHelpers from 'src/app/infrastructure/utils/dom-helpers';

import { DiffCache, DiffLinesInParagraph, LineRange } from '../../../../definitions';
import { ViewUnifiedChangeType } from '../../definitions';
import { ViewUnifiedChange } from '../../view-models';
import { LineNumberedString, LineNumberingService, LineNumberRange } from '../line-numbering.service';

const ELEMENT_NODE = Node.ELEMENT_NODE;
const TEXT_NODE = Node.TEXT_NODE;
const DOCUMENT_FRAGMENT_NODE = Node.DOCUMENT_FRAGMENT_NODE;

/**
 * This data structure is used when determining the most specific common ancestor of two HTML node
 * (`node1` and `node2`)
 * within the same Document Fragment.
 */
interface CommonAncestorData {
    /**
     * The most specific common ancestor node.
     */
    commonAncestor: Node;
    /**
     * The nodes inbetween `commonAncestor` and the `node1` in the DOM hierarchy.
     * Empty, if node1 is a direct descendant.
     */
    trace1: Node[];
    /**
     * The nodes inbetween `commonAncestor` and the `node2` in the DOM hierarchy.
     * Empty, if node2 is a direct descendant.
     */
    trace2: Node[];
    /**
     * Starting the root node, this indicates the depth level of the `commonAncestor`.
     */
    index: number;
}

/**
 * An object produced by `extractRangeByLineNumbers``. It contains both the extracted lines as well as
 * information about the context in which these lines occur.
 * This additional information is meant to render the snippet correctly without producing broken HTML
 */
interface ExtractedContent {
    /**
     * The HTML between the two line numbers. Line numbers and automatically set line breaks are stripped.
     * All HTML tags are converted to uppercase
     * (e.g. Line 2</LI><LI>Line3</LI><LI>Line 4 <br>)
     */
    html: string;
    /**
     * The most specific DOM element that contains the HTML snippet (e.g. a UL, if several LIs are selected)
     */
    ancestor: Node;
    /**
     * An HTML string that opens all necessary tags to get the browser into the rendering mode
     * of the ancestor element (e.g. <DIV><UL> in the case of the multiple LIs)
     */
    outerContextStart: string;
    /**
     * An HTML string that closes all necessary tags from the ancestor element (e.g. </UL></DIV>
     */
    outerContextEnd: string;
    /**
     * A string that opens all necessary tags between the ancestor and the beginning of the selection (e.g. <LI>)
     */
    innerContextStart: string;
    /**
     * A string that closes all tags after the end of the selection to the ancestor (e.g. </LI>)
     */
    innerContextEnd: string;
    /**
     * The HTML before the selected area begins (including line numbers)
     */
    previousHtml: string;
    /**
     * A HTML snippet that closes all open tags from previousHtml
     */
    previousHtmlEndSnippet: string;
    /**
     * The HTML after the selected area
     */
    followingHtml: string;
    /**
     * A HTML snippet that opens all HTML tags necessary to render "followingHtml"
     */
    followingHtmlStartSnippet: string;
}

/**
 * Functionality regarding diffing, merging and extracting line ranges.
 *
 * ## Examples
 *
 * Cleaning up a string generated by CKEditor:
 *
 * ```ts
 * this.diffService.removeDuplicateClassesInsertedByCkeditor(motion.text)
 * ```
 *
 * Extracting a range specified by line numbers from a motion text:
 *
 * ```ts
 * const lineLength = 80;
 * const lineNumberedText = this.lineNumbering.insertLineNumbers(
 *   '<p>A line</p><p>Another line</p><ul><li>A list item</li><li>Yet another item</li></ul>', lineLength
 * );
 * const extractFrom = 2;
 * const extractUntil = 3;
 * const extractedData = this.diffService.extractRangeByLineNumbers(lineNumberedText, extractFrom, extractUntil)
 * ```
 *
 * Creating a valid HTML from such a extracted text, including line numbers:
 *
 * ```ts
 * const extractedHtml = this.diffService.formatDiffWithLineNumbers(extractedData, lineLength, extractFrom);
 * ```
 *
 * Creating the diff between two html strings:
 *
 * ```ts
 * const before = '<P>Lorem ipsum dolor sit amet, sed diam voluptua. At </P>';
 * const beforeLineNumbered = this.lineNumbering.insertLineNumbers(before, 80)
 * const after = '<P>Lorem ipsum dolor sit amet, sed diam voluptua. At2</P>';
 * const diff = this.diffService.diff(before, after);
 * ```ts
 *
 * Given a (line numbered) diff string, detect the line number range with changes:
 *
 * ```ts
 * this.diffService.detectAffectedLineRange(diff);
 * ```
 *
 * Given a diff'ed string, apply all changes to receive the new version of the text:
 *
 * ```ts
 * const diffedHtml =
 *   '<p>Test <span class="delete">Test 2</span> Another test <del>Test 3</del></p><p class="delete">Test 4</p>';
 * const newVersion = this.diffService.diffHtmlToFinalText(diffedHtml);
 * ```
 *
 * Replace a line number range in a text by new text:
 *
 * ```ts
 * const lineLength = 80;
 * const lineNumberedText =
 *   this.lineNumbering.insertLineNumbers(
 *     '<p>A line</p><p>Another line</p><ul><li>A list item</li><li>Yet another item</li></ul>',
 *     lineLength
 *   );
 * const merged = this.diffService.replaceLines(lineNumberedText, '<p>Replaced paragraph</p>', 1, 1);
 * ```
 */
@Injectable({
    providedIn: `root`
})
export class MotionDiffService {
    // @TODO Decide on a more sophisticated implementation
    private diffCache = new DiffCache();

    public constructor(private lineNumberingService: LineNumberingService, private translate: TranslateService) {}

    /**
     * Searches for the line breaking node within the given Document specified by the given lineNumber.
     * This is performed by using a querySelector.
     *
     * @param {DocumentFragment} fragment
     * @param {number} lineNumber
     * @returns {Element}
     */
    public getLineNumberNode(fragment: DocumentFragment, lineNumber: number): Element | null {
        return fragment?.querySelector(`os-linebreak.os-line-number.line-number-` + lineNumber);
    }

    /**
     * This returns the first line breaking node within the given node.
     * If none is found, `null` is returned.
     *
     * @param {Node} node
     * @returns {Element}
     */
    private getFirstLineNumberNode(node: Node): Element | null {
        return DomHelpers.getNodeByName(node, `OS-LINEBREAK`);
    }

    /**
     * This returns the last line breaking node within the given node.
     * If none is found, `null` is returned.
     *
     * @param {Node} node
     * @returns {Element}
     */
    private getLastLineNumberNode(node: Node): Element | null {
        return DomHelpers.getNodeByName(node, `OS-LINEBREAK`, true);
    }

    /**
     * Returns a os linebreak element
     * Example: <OS-LINEBREAK class="os-line-number line-number-23" data-line-number="23"/>
     */
    private getLineMarker(lineNumber: number, classes?: string): Node {
        const lineMarker = document.createElement(`OS-LINEBREAK`);
        lineMarker.setAttribute(`data-line-number`, lineNumber.toString(10));
        lineMarker.setAttribute(`class`, classes ?? `os-line-number line-number-` + lineNumber.toString(10));

        return lineMarker;
    }

    /**
     * Adds elements like <OS-LINEBREAK class="os-line-number line-number-23" data-line-number="23"/>
     * to a given fragment
     *
     * @param {DocumentFragment} fragment
     */
    public insertInternalLineMarkers(fragment: DocumentFragment): void {
        if (fragment.querySelectorAll(`OS-LINEBREAK`).length > 0) {
            // Prevent duplicate calls
            return;
        }
        const lineNumbers = fragment.querySelectorAll(`span.os-line-number`);
        let maxLineNumber = 0;

        lineNumbers.forEach((insertBefore: Node) => {
            const lineNumberElement = <Element>insertBefore;
            while (
                insertBefore.parentNode?.nodeType !== DOCUMENT_FRAGMENT_NODE &&
                DomHelpers.isFirstNonemptyChild(insertBefore.parentNode!, insertBefore)
            ) {
                insertBefore = insertBefore.parentNode!;
            }
            insertBefore.parentNode?.insertBefore(
                this.getLineMarker(
                    parseInt(lineNumberElement.getAttribute(`data-line-number`)),
                    lineNumberElement.getAttribute(`class`)
                ),
                insertBefore
            );
            maxLineNumber = parseInt(lineNumberElement.getAttribute(`data-line-number`) as string, 10);
        });

        // Add one more "fake" line number at the end and beginning, so we can select the last line as well
        fragment.appendChild(this.getLineMarker(maxLineNumber + 1));
        fragment.insertBefore(this.getLineMarker(0), fragment.firstChild);
    }

    /**
     * Returns information about the common ancestors of two given nodes.
     *
     * @param {Node} node1
     * @param {Node} node2
     * @returns {CommonAncestorData}
     */
    public getCommonAncestor(node1: Node, node2: Node): CommonAncestorData {
        const trace1 = DomHelpers.getNodeContextTrace(node1);
        const trace2 = DomHelpers.getNodeContextTrace(node2);
        const childTrace1 = [];
        const childTrace2 = [];
        let commonAncestor: Node | null = null;
        let commonIndex = 0;

        for (let i = 0; i < trace1.length && i < trace2.length; i++) {
            if (trace1[i] === trace2[i]) {
                commonAncestor = trace1[i];
                commonIndex = i;
            }
        }
        for (let i = commonIndex + 1; i < trace1.length; i++) {
            childTrace1.push(trace1[i]);
        }
        for (let i = commonIndex + 1; i < trace2.length; i++) {
            childTrace2.push(trace2[i]);
        }
        return {
            commonAncestor: commonAncestor!,
            trace1: childTrace1,
            trace2: childTrace2,
            index: commonIndex
        };
    }

    /**
     * This converts a HTML Node element into a rendered HTML string.
     *
     * @param {Node} node
     * @returns {string}
     */
    private serializeTag(node: Node): string {
        if (node.nodeType !== ELEMENT_NODE) {
            // Fragments are only placeholders and do not have an HTML representation
            return ``;
        }

        return DomHelpers.serializeTag(node);
    }

    /**
     * This performs HTML normalization to prevent the Diff-Algorithm from detecting changes when there are actually
     * none. Common problems covered by this method are differently ordered Attributes of HTML elements or HTML-encoded
     * special characters.
     *
     * @param {string} html
     * @returns {string}
     * @private
     */
    public normalizeHtmlForDiff(html: string): string {
        html = DomHelpers.sortHtmlAttributes(html);
        html = DomHelpers.htmlToUppercase(html);

        // remove whitespaces infront of closing tags
        html = html
            .replace(/\s+<\/P>/gi, `</P>`)
            .replace(/\s+<\/DIV>/gi, `</DIV>`)
            .replace(/\s+<\/LI>/gi, `</LI>`);
        html = html.replace(/\s+<LI>/gi, `<LI>`).replace(/<\/LI>\s+/gi, `</LI>`);

        html = html.replace(/\u00A0/g, ` `); // replace no break space
        html = html.replace(/\u2013/g, `-`);
        html = DomHelpers.replaceHtmlEntities(html);

        // Newline characters: after closing block-level-elements, but not after BR (which is inline)
        html = html.replace(/(<br *\/?>)\n/gi, `$1`);
        html = html.replace(/[ \n\t]+/gi, ` `);
        html = html.replace(/(<\/(div|p|ul|li|blockquote>)>) /gi, `$1\n`);

        return html;
    }

    /**
     * Given two strings, this method tries to guess if `htmlNew` can be produced from `htmlOld` by inserting
     * or deleting text, or if both is necessary (replace)
     * Returns replace if strings are equal
     *
     * @param {string} htmlOld
     * @param {string} htmlNew
     * @returns {number}
     */
    public detectReplacementType(htmlOld: string, htmlNew: string): ModificationType {
        htmlOld = this.normalizeHtmlForDiff(htmlOld);
        htmlNew = this.normalizeHtmlForDiff(htmlNew);

        if (htmlOld === htmlNew) {
            return ModificationType.TYPE_REPLACEMENT;
        }

        let firstDiffIndex = Array.from(htmlOld).findIndex((v, i) => v !== htmlNew[i]);

        const remainderOld = htmlOld.substr(firstDiffIndex);
        const remainderNew = htmlNew.substr(firstDiffIndex);

        if (remainderOld.length > remainderNew.length) {
            if (remainderOld.substr(remainderOld.length - remainderNew.length) === remainderNew) {
                return ModificationType.TYPE_DELETION;
            }
        } else if (remainderOld.length < remainderNew.length) {
            if (remainderNew.substr(remainderNew.length - remainderOld.length) === remainderOld) {
                return ModificationType.TYPE_INSERTION;
            }
        }

        return ModificationType.TYPE_REPLACEMENT;
    }

    /**
     * Adapted from http://ejohn.org/projects/javascript-diff-algorithm/
     * by John Resig, MIT License
     *
     * @param {array} oldArr
     * @param {array} newArr
     * @returns {object}
     */
    private diffArrays(oldArr: any, newArr: any): any {
        const ns: any = {};
        const os: any = {};

        for (let i = 0; i < newArr.length; i++) {
            if (ns[newArr[i]] === undefined) {
                ns[newArr[i]] = { rows: [], o: null };
            }
            ns[newArr[i]].rows.push(i);
        }

        for (let i = 0; i < oldArr.length; i++) {
            if (os[oldArr[i]] === undefined) {
                os[oldArr[i]] = { rows: [], n: null };
            }
            os[oldArr[i]].rows.push(i);
        }

        for (let i in ns) {
            if (ns[i].rows.length === 1 && typeof os[i] !== `undefined` && os[i].rows.length === 1) {
                newArr[ns[i].rows[0]] = { text: newArr[ns[i].rows[0]], row: os[i].rows[0] };
                oldArr[os[i].rows[0]] = { text: oldArr[os[i].rows[0]], row: ns[i].rows[0] };
            } else if (
                ns[i].rows.length >= 1 &&
                ns[i].rows.indexOf(0) !== -1 &&
                os[i] !== undefined &&
                os[i].rows.indexOf(0) !== -1
            ) {
                newArr[0] = { text: newArr[0], row: 0 };
                oldArr[0] = { text: oldArr[0], row: 0 };
            }
        }

        for (let i = 0; i < newArr.length - 1; i++) {
            if (
                newArr[i].text !== null &&
                newArr[i + 1].text === undefined &&
                newArr[i].row + 1 < oldArr.length &&
                oldArr[newArr[i].row + 1].text === undefined &&
                newArr[i + 1] === oldArr[newArr[i].row + 1]
            ) {
                newArr[i + 1] = { text: newArr[i + 1], row: newArr[i].row + 1 };
                oldArr[newArr[i].row + 1] = { text: oldArr[newArr[i].row + 1], row: i + 1 };
            }
        }

        for (let i = newArr.length - 1; i > 0; i--) {
            if (
                newArr[i].text !== null &&
                newArr[i - 1].text === undefined &&
                newArr[i].row > 0 &&
                oldArr[newArr[i].row - 1].text === undefined &&
                newArr[i - 1] === oldArr[newArr[i].row - 1]
            ) {
                newArr[i - 1] = { text: newArr[i - 1], row: newArr[i].row - 1 };
                oldArr[newArr[i].row - 1] = { text: oldArr[newArr[i].row - 1], row: i - 1 };
            }
        }

        // This fixes the problem tested by "does not lose words when changes are moved X-wise"
        let lastRow = 0;
        for (let z = 0; z < newArr.length; z++) {
            if (newArr[z].row && newArr[z].row > lastRow) {
                lastRow = newArr[z].row;
            }
            if (newArr[z].row && newArr[z].row < lastRow) {
                oldArr[newArr[z].row] = oldArr[newArr[z].row].text;
                newArr[z] = newArr[z].text;
            }
        }

        return { o: oldArr, n: newArr };
    }

    /**
     * This method splits a string into an array of strings, such as that it can be used by the diff method.
     * Mainly it tries to split it into single words, but prevents HTML tags from being split into different elements.
     *
     * @param {string} str
     * @returns {string[]}
     */
    private tokenizeHtml(str: string): string[] {
        let res = [str];
        for (let splitConf of [
            { by: `<`, type: `prepend` },
            { by: `>`, type: `append` },
            { by: ` ` },
            { by: `.` },
            { by: `,` },
            { by: `!` },
            { by: `-` },
            { by: `\n`, type: `append` }
        ]) {
            const newArr = [];
            for (let i = 0; i < res.length; i++) {
                // Don't split HTML tags
                if (res[i][0] === `<` && splitConf.by !== `<` && splitConf.by !== `>`) {
                    newArr.push(res[i]);
                    continue;
                }

                newArr.push(...splitStringKeepSeperator(res[i], splitConf.by, splitConf.type));
            }
            res = newArr;
        }

        return res.filter(el => el !== ``);
    }

    /**
     * Given two strings, this method generates a consolidated new string that indicates the operations necessary
     * to get from `oldStr` to `newStr` by <ins>...</ins> and <del>...</del>-Tags
     *
     * @param {string} oldStr
     * @param {string} newStr
     * @returns {string}
     */
    private diffString(oldStr: string, newStr: string): string {
        oldStr = this.normalizeHtmlForDiff(oldStr.replace(/\s+$/, ``).replace(/^\s+/, ``));
        newStr = this.normalizeHtmlForDiff(newStr.replace(/\s+$/, ``).replace(/^\s+/, ``));

        const out = this.diffArrays(this.tokenizeHtml(oldStr), this.tokenizeHtml(newStr));

        let str = ``;
        if (out.n.length === 0) {
            for (let i = 0; i < out.o.length; i++) {
                str += `<del>` + out.o[i] + `</del>`;
            }
        } else {
            if (out.n[0].text === undefined) {
                for (let k = 0; k < out.o.length && out.o[k].text === undefined; k++) {
                    str += `<del>` + out.o[k] + `</del>`;
                }
            }

            let currOldRow = 0;
            for (let i = 0; i < out.n.length; i++) {
                if (out.n[i].text === undefined) {
                    if (out.n[i] !== ``) {
                        str += `<ins>` + out.n[i] + `</ins>`;
                    }
                } else if (out.n[i].row < currOldRow) {
                    str += `<ins>` + out.n[i].text + `</ins>`;
                } else {
                    let pre = ``;

                    if (i + 1 < out.n.length && out.n[i + 1].row !== undefined && out.n[i + 1].row > out.n[i].row + 1) {
                        for (let n = out.n[i].row + 1; n < out.n[i + 1].row; n++) {
                            if (out.o[n].text === undefined) {
                                pre += `<del>` + out.o[n] + `</del>`;
                            } else {
                                pre += `<del>` + out.o[n].text + `</del>`;
                            }
                        }
                    } else {
                        for (let j = out.n[i].row + 1; j < out.o.length && out.o[j].text === undefined; j++) {
                            pre += `<del>` + out.o[j] + `</del>`;
                        }
                    }
                    str += out.n[i].text + pre;

                    currOldRow = out.n[i].row;
                }
            }
        }

        return str.replace(/^\s+/g, ``).replace(/\s+$/g, ``).replace(/ {2,}/g, ` `);
    }

    /**
     * This detects if a given string contains broken HTML. This can happen when the Diff accidentally produces
     * wrongly nested HTML tags.
     *
     * @param {string} html
     * @returns {boolean}
     * @private
     */
    private diffDetectBrokenDiffHtml(html: string): boolean {
        // If other HTML tags are contained within INS/DEL (e.g. "<ins>Test</p></ins>"), let's better be cautious
        // The "!!(found=...)"-construction is only used to make jshint happy :)
        const findDel = /<del>([\s\S]*?)<\/del>/gi;
        const findIns = /<ins>([\s\S]*?)<\/ins>/gi;
        let found: RegExpExecArray;
        let inner: string;
        while (!!(found = findDel.exec(html))) {
            inner = found[1].replace(/<br[^>]*>/gi, ``);
            if (!DomHelpers.isValidInlineHtml(inner)) {
                return true;
            }
        }
        while (!!(found = findIns.exec(html))) {
            inner = found[1].replace(/<br[^>]*>/gi, ``);
            if (!DomHelpers.isValidInlineHtml(inner)) {
                return true;
            }
        }

        // If non of the conditions up to now is met, we consider the diff as being sane
        return false;
    }

    /**
     * This function removes color-Attributes from the styles of this node or a descendant,
     * as they interfer with the green/red color in HTML and PDF
     *
     * For the moment, it is sufficient to do this only in paragraph diff mode, as we fall back to this mode anyway
     * once we encounter SPANs or other tags inside of INS/DEL-tags
     *
     * @param {Element} node
     * @private
     */
    private removeColorStyles(node: Element): void {
        const styles = node.getAttribute(`style`);
        if (styles && styles.indexOf(`color`) > -1) {
            const stylesNew: any[] = [];
            styles.split(`;`).forEach((style: string): void => {
                if (!style.match(/^\s*color\s*:/i)) {
                    stylesNew.push(style);
                }
            });
            if (stylesNew.join(`;`) === ``) {
                node.removeAttribute(`style`);
            } else {
                node.setAttribute(`style`, stylesNew.join(`;`));
            }
        }
        for (let i = 0; i < node.childNodes.length; i++) {
            if (node.childNodes[i].nodeType === ELEMENT_NODE) {
                this.removeColorStyles(<Element>node.childNodes[i]);
            }
        }
    }

    /**
     * This fixes a very specific, really weird bug that is tested in the test case "does not a change in a very
     * specific case.
     *
     * @param {string}diffStr
     * @return {string}
     */
    private fixWrongChangeDetection(diffStr: string): string {
        if (diffStr.indexOf(`<del>`) === -1 || diffStr.indexOf(`<ins>`) === -1) {
            return diffStr;
        }

        const findDelGroupFinder = /(?:<del>.*?<\/del>)+/gi;
        let found: RegExpExecArray;
        let returnStr = diffStr;

        while (!!(found = findDelGroupFinder.exec(diffStr))) {
            const del = found[0];
            const split = returnStr.split(del);

            const findsGroupFinder = /^(?:<ins>.*?<\/ins>)+/gi;
            const foundIns = findsGroupFinder.exec(split[1]);
            if (foundIns) {
                const ins = foundIns[0];

                let delShortened = del
                    .replace(
                        /<del>((<BR CLASS="os-line-break"><\/del><del>)?(<span[^>]+os-line-number[^>]+?>)(\s|<\/?del>)*<\/span>)<\/del>/gi,
                        ``
                    )
                    .replace(/<\/del><del>/g, ``);
                const insConv = ins
                    .replace(/<ins>/g, `<del>`)
                    .replace(/<\/ins>/g, `</del>`)
                    .replace(/<\/del><del>/g, ``);
                if (delShortened.indexOf(insConv) !== -1) {
                    delShortened = delShortened.replace(insConv, ``);
                    if (delShortened === ``) {
                        returnStr = returnStr.replace(del + ins, del.replace(/<del>/g, ``).replace(/<\/del>/g, ``));
                    }
                }
            }
        }
        return returnStr;
    }

    /**
     * Converts a given HTML node into HTML string and optionally strips line number nodes from it.
     *
     * @param {Node} node
     * @param {boolean} stripLineNumbers
     * @returns {string}
     */
    private serializeDom(node: Node, stripLineNumbers: boolean): string {
        if (node.nodeType === TEXT_NODE) {
            return node.nodeValue!.replace(/</g, `&lt;`).replace(/>/g, `&gt;`);
        }
        if (
            stripLineNumbers &&
            (this.lineNumberingService.isOsLineNumberNode(node) || this.lineNumberingService.isOsLineBreakNode(node))
        ) {
            return ``;
        }
        if (node.nodeName === `OS-LINEBREAK`) {
            return ``;
        }
        if (node.nodeName === `BR`) {
            const element = <Element>node;
            let br = `<BR`;
            for (let i = 0; i < element.attributes.length; i++) {
                const attr = element.attributes[i];
                br += ` ` + attr.name + `="` + attr.value + `"`;
            }
            return br + `>`;
        }

        let html = this.serializeTag(node);
        for (let i = 0; i < node.childNodes.length; i++) {
            if (node.childNodes[i].nodeType === TEXT_NODE) {
                html += node.childNodes[i]
                    .nodeValue!.replace(/&/g, `&amp;`)
                    .replace(/</g, `&lt;`)
                    .replace(/>/g, `&gt;`);
            } else {
                html += this.serializeDom(node.childNodes[i], stripLineNumbers);
            }
        }
        if (node.nodeType !== DOCUMENT_FRAGMENT_NODE) {
            html += `</` + node.nodeName + `>`;
        }

        return html;
    }

    /**
     * When a <li> with a os-split-before-class (set by extractRangeByLineNumbers) is edited when creating a
     * change recommendation and is split again in CKEditor, the second list items also gets that class.
     * This is not correct however, as the second one actually is a new list item. So we need to remove it again.
     *
     * @param {string} html
     * @returns {string}
     */
    public removeDuplicateClassesInsertedByCkeditor(html: string): string {
        const fragment = DomHelpers.htmlToFragment(html);
        const items = fragment.querySelectorAll(`li.os-split-before`);
        for (let i = 0; i < items.length; i++) {
            if (!DomHelpers.isFirstNonemptyChild(items[i].parentNode!, items[i])) {
                DomHelpers.removeCSSClass(items[i], `os-split-before`);
            }
        }
        return this.serializeDom(fragment, false);
    }

    /**
     * Given a DOM tree and a specific node within that tree, this method returns the HTML string from the beginning
     * of this tree up to this node.
     * The returned string in itself is not renderable, as it stops in the middle of the complete HTML, with
     * opened tags.
     *
     * Implementation hint: the first element of "toChildTrace" array needs to be a child element of "node"
     * @param {Node} node
     * @param {Node[]} toChildTrace
     * @param {boolean} stripLineNumbers
     * @returns {string}
     */
    public serializePartialDomToChild(node: Node, toChildTrace: Node[], stripLineNumbers: boolean): string {
        if (this.lineNumberingService.isOsLineNumberNode(node) || this.lineNumberingService.isOsLineBreakNode(node)) {
            return ``;
        }
        if (node.nodeName === `OS-LINEBREAK`) {
            return ``;
        }

        let html = this.serializeTag(node);
        let found = false;

        for (let i = 0; i < node.childNodes.length && !found; i++) {
            if (node.childNodes[i] === toChildTrace[0]) {
                found = true;
                const childElement = <Element>node.childNodes[i];
                const remainingTrace = toChildTrace;
                remainingTrace.shift();
                if (!this.lineNumberingService.isOsLineNumberNode(childElement)) {
                    html += this.serializePartialDomToChild(childElement, remainingTrace, stripLineNumbers);
                }
            } else if (node.childNodes[i].nodeType === TEXT_NODE) {
                html += node.childNodes[i].nodeValue;
            } else {
                const childElement = <Element>node.childNodes[i];
                if (
                    !stripLineNumbers ||
                    (!this.lineNumberingService.isOsLineNumberNode(childElement) &&
                        !this.lineNumberingService.isOsLineBreakNode(childElement))
                ) {
                    html += this.serializeDom(childElement, stripLineNumbers);
                }
            }
        }
        if (!found) {
            throw new Error(`Inconsistency or invalid call of this function detected (to)`);
        }
        return html;
    }

    /**
     * Given a DOM tree and a specific node within that tree, this method returns the HTML string beginning after this
     * node to the end of the tree.
     * The returned string in itself is not renderable, as it starts in the middle of the complete HTML
     * with opened tags.
     *
     * Implementation hint: the first element of "fromChildTrace" array needs to be a child element of "node"
     * @param {Node} node
     * @param {Node[]} fromChildTrace
     * @param {boolean} stripLineNumbers
     * @returns {string}
     */
    public serializePartialDomFromChild(node: Node, fromChildTrace: Node[], stripLineNumbers: boolean): string {
        if (this.lineNumberingService.isOsLineNumberNode(node) || this.lineNumberingService.isOsLineBreakNode(node)) {
            return ``;
        }
        if (node.nodeName === `OS-LINEBREAK`) {
            return ``;
        }

        let html = ``;
        let found = false;
        for (let i = 0; i < node.childNodes.length; i++) {
            if (node.childNodes[i] === fromChildTrace[0]) {
                found = true;
                const childElement = <Element>node.childNodes[i];
                const remainingTrace = fromChildTrace;
                remainingTrace.shift();
                if (!this.lineNumberingService.isOsLineNumberNode(childElement)) {
                    html += this.serializePartialDomFromChild(childElement, remainingTrace, stripLineNumbers);
                }
            } else if (found) {
                if (node.childNodes[i].nodeType === TEXT_NODE) {
                    html += node.childNodes[i].nodeValue;
                } else {
                    const childElement = <Element>node.childNodes[i];
                    if (
                        !stripLineNumbers ||
                        (!this.lineNumberingService.isOsLineNumberNode(childElement) &&
                            !this.lineNumberingService.isOsLineBreakNode(childElement))
                    ) {
                        html += this.serializeDom(childElement, stripLineNumbers);
                    }
                }
            }
        }
        if (!found) {
            throw new Error(`Inconsistency or invalid call of this function detected (from)`);
        }
        if (node.nodeType !== DOCUMENT_FRAGMENT_NODE) {
            html += `</` + node.nodeName + `>`;
        }
        return html;
    }

    /**
     * Returns the HTML snippet between two given line numbers.
     * extractRangeByLineNumbers
     * Hint:
     * - if toLine === null, then everything from fromLine to the end of the fragment is returned
     *
     * In addition to the HTML snippet, additional information is provided regarding the most specific DOM element
     * that contains the whole section specified by the line numbers (like a P-element if only one paragraph is selected
     * or the most outer DIV, if multiple sections selected).
     *
     * This additional information is meant to render the snippet correctly without producing broken HTML
     *
     * In some cases, the returned HTML tags receive additional CSS classes, providing information both for
     * rendering it and for merging it again correctly.
     * - os-split-*:        These classes are set for all HTML Tags that have been split into two by this process,
     *                      e.g. if the fromLine- or toLine-line-break was somewhere in the middle of this tag.
     *                      If a tag is split, the first one receives "os-split-after", and the second
     *                      one "os-split-before".
     * For example, for the following string <p>Line 1<br>Line 2<br>Line 3</p>:
     * - extracting line 1 to 1 results in <p class="os-split-after">Line 1</p>
     * - extracting line 2 to 2 results in <p class="os-split-after os-split-before">Line 2</p>
     * - extracting line 3 to null/3 results in <p class="os-split-before">Line 3</p>
     *
     * @param {LineNumberedString} html
     * @param {number} fromLine
     * @param {number} toLine
     * @returns {ExtractedContent}
     */
    public extractRangeByLineNumbers(
        html: LineNumberedString,
        fromLine: number,
        toLine: number | null
    ): ExtractedContent {
        if (typeof html !== `string`) {
            throw new Error(`Invalid call - extractRangeByLineNumbers expects a string as first argument`);
        }

        const cacheKey = fromLine + `-` + toLine + `-` + djb2hash(html);
        const cached = this.diffCache.get(cacheKey);

        if (cached) {
            return cached;
        }

        const fragment = DomHelpers.htmlToFragment(html);
        this.insertInternalLineMarkers(fragment);

        let toLineNumber: number;
        if (toLine === null) {
            const internalLineMarkers = fragment.querySelectorAll(`OS-LINEBREAK`);
            const lastMarker = <Element>internalLineMarkers[internalLineMarkers.length - 1];
            toLineNumber = parseInt(lastMarker.getAttribute(`data-line-number`) as string, 10);
        } else {
            toLineNumber = toLine + 1;
        }

        const fromLineNumberNode = this.getLineNumberNode(fragment, fromLine);
        const toLineNumberNode = toLineNumber ? this.getLineNumberNode(fragment, toLineNumber) : null;
        const ancestorData = this.getCommonAncestor(fromLineNumberNode as Element, toLineNumberNode as Element);

        const fromChildTraceRel = ancestorData.trace1;
        const fromChildTraceAbs = DomHelpers.getNodeContextTrace(fromLineNumberNode as Element);
        const toChildTraceRel = ancestorData.trace2;
        const toChildTraceAbs = DomHelpers.getNodeContextTrace(toLineNumberNode as Element);
        const ancestor = ancestorData.commonAncestor;
        let htmlOut = ``;
        let outerContextStart = ``;
        let outerContextEnd = ``;
        let innerContextStart = ``;
        let innerContextEnd = ``;
        let previousHtmlEndSnippet = ``;
        let followingHtmlStartSnippet = ``;

        fromChildTraceAbs.shift();
        const previousHtml = this.serializePartialDomToChild(fragment, fromChildTraceAbs, false);

        toChildTraceAbs.shift();
        const followingHtml = this.serializePartialDomFromChild(fragment, toChildTraceAbs, false);

        let currNode: Node = fromLineNumberNode as Element;
        let isSplit = false;
        while (currNode.parentNode) {
            if (!DomHelpers.isFirstNonemptyChild(currNode.parentNode, currNode)) {
                isSplit = true;
            }
            if (isSplit) {
                DomHelpers.addCSSClass(currNode.parentNode, `os-split-before`);
            }
            if (currNode.nodeName !== `OS-LINEBREAK`) {
                previousHtmlEndSnippet += `</` + currNode.nodeName + `>`;
            }
            currNode = currNode.parentNode;
        }

        currNode = toLineNumberNode as Element;
        isSplit = false;
        while (currNode.parentNode) {
            if (!DomHelpers.isFirstNonemptyChild(currNode.parentNode, currNode)) {
                isSplit = true;
            }
            if (isSplit) {
                DomHelpers.addCSSClass(currNode.parentNode, `os-split-after`);
            }
            if (currNode.parentNode.nodeName === `OL`) {
                const parentElement = <Element>currNode.parentNode;
                const fakeOl = parentElement.cloneNode(false) as any;
                const offset = parentElement.getAttribute(`start`)
                    ? parseInt(parentElement.getAttribute(`start`) as string, 10) - 1
                    : 0;
                fakeOl.setAttribute(
                    `start`,
                    (
                        <number>DomHelpers.getNthOfListItem(parentElement, toLineNumberNode as Element) + offset
                    ).toString()
                );
                followingHtmlStartSnippet = this.serializeTag(fakeOl) + followingHtmlStartSnippet;
            } else {
                followingHtmlStartSnippet = this.serializeTag(currNode.parentNode) + followingHtmlStartSnippet;
            }
            currNode = currNode.parentNode;
        }

        isSplit = false;
        for (let i = 0, found = false; i < fromChildTraceRel.length && !found; i++) {
            if (fromChildTraceRel[i].nodeName === `OS-LINEBREAK`) {
                found = true;
            } else {
                if (!DomHelpers.isFirstNonemptyChild(fromChildTraceRel[i], fromChildTraceRel[i + 1])) {
                    isSplit = true;
                }
                if (fromChildTraceRel[i].nodeName === `OL`) {
                    const element = <Element>fromChildTraceRel[i];
                    const fakeOl = element.cloneNode(false) as any;
                    const offset = element.getAttribute(`start`)
                        ? parseInt(element.getAttribute(`start`) as string, 10) - 1
                        : 0;
                    fakeOl.setAttribute(
                        `start`,
                        (
                            offset + <number>DomHelpers.getNthOfListItem(element, fromLineNumberNode as Element)
                        ).toString()
                    );
                    innerContextStart += this.serializeTag(fakeOl);
                } else {
                    if (i < fromChildTraceRel.length - 1 && isSplit) {
                        DomHelpers.addCSSClass(fromChildTraceRel[i], `os-split-before`);
                    }
                    innerContextStart += this.serializeTag(fromChildTraceRel[i]);
                }
            }
        }
        for (let i = 0, found = false; i < toChildTraceRel.length && !found; i++) {
            if (toChildTraceRel[i].nodeName === `OS-LINEBREAK`) {
                found = true;
            } else {
                innerContextEnd = `</` + toChildTraceRel[i].nodeName + `>` + innerContextEnd;
            }
        }

        for (let i = 0, found = false; i < ancestor.childNodes.length; i++) {
            if (ancestor.childNodes[i] === fromChildTraceRel[0]) {
                found = true;
                fromChildTraceRel.shift();
                htmlOut += this.serializePartialDomFromChild(ancestor.childNodes[i], fromChildTraceRel, true);
            } else if (ancestor.childNodes[i] === toChildTraceRel[0]) {
                found = false;
                toChildTraceRel.shift();
                htmlOut += this.serializePartialDomToChild(ancestor.childNodes[i], toChildTraceRel, true);
            } else if (found === true) {
                htmlOut += this.serializeDom(ancestor.childNodes[i], true);
            }
        }

        currNode = ancestor;
        while (currNode.parentNode) {
            if (currNode.nodeName === `OL`) {
                const currElement = <Element>currNode;
                const fakeOl = currElement.cloneNode(false) as any;
                const offset = currElement.getAttribute(`start`)
                    ? parseInt(currElement.getAttribute(`start`) as string, 10) - 1
                    : 0;
                fakeOl.setAttribute(
                    `start`,
                    (<any>DomHelpers.getNthOfListItem(currElement, fromLineNumberNode as Element) + offset).toString()
                );
                outerContextStart = this.serializeTag(fakeOl) + outerContextStart;
            } else {
                outerContextStart = this.serializeTag(currNode) + outerContextStart;
            }
            outerContextEnd += `</` + currNode.nodeName + `>`;
            currNode = currNode.parentNode;
        }

        const ret = {
            html: htmlOut,
            ancestor,
            outerContextStart,
            outerContextEnd,
            innerContextStart,
            innerContextEnd,
            previousHtml,
            previousHtmlEndSnippet,
            followingHtml,
            followingHtmlStartSnippet
        };

        this.diffCache.put(cacheKey, ret);
        return ret;
    }

    /**
     * Convenience method that takes the html-attribute from an extractRangeByLineNumbers()-method and
     * wraps it with the context.
     *
     * @param {ExtractedContent} diff
     */
    public formatDiff(diff: ExtractedContent): string {
        return (
            diff.outerContextStart + diff.innerContextStart + diff.html + diff.innerContextEnd + diff.outerContextEnd
        );
    }

    /**
     * Convenience method that takes the html-attribute from an extractRangeByLineNumbers()-method,
     * wraps it with the context and adds line numbers.
     *
     * @param {ExtractedContent} diff
     * @param {number} lineLength
     * @param {number} firstLine
     */
    public formatDiffWithLineNumbers(diff: ExtractedContent, lineLength: number, firstLine: number): string {
        let text = this.formatDiff(diff);
        text = this.lineNumberingService.insertLineNumbers({ html: text, lineLength, firstLine });
        return text;
    }

    /**
     * This is a workardoun to prevent the last word of the inserted text from accidently being merged with the
     * first word of the following line.
     *
     * This happens as trailing spaces in the change recommendation's text are frequently stripped,
     * which is pretty nasty if the original text goes on after the affected line. So we insert a space
     * if the original line ends with one.
     *
     * @param {Element|DocumentFragment} element
     */
    private insertDanglingSpace(element: Element | DocumentFragment): void {
        if (element.childNodes.length > 0) {
            let lastChild = element.childNodes[element.childNodes.length - 1];
            if (
                lastChild.nodeType === TEXT_NODE &&
                !lastChild.nodeValue!.match(/[\S]/) &&
                element.childNodes.length > 1
            ) {
                // If the text node only contains whitespaces, chances are high it's just space between block elmeents,
                // like a line break between </LI> and </UL>
                lastChild = element.childNodes[element.childNodes.length - 2];
            }
            if (lastChild.nodeType === TEXT_NODE) {
                if (lastChild.nodeValue === `` || lastChild.nodeValue!.substr(-1) !== ` `) {
                    lastChild.nodeValue += ` `;
                }
            } else {
                this.insertDanglingSpace(<Element>lastChild);
            }
        }
    }

    /**
     * This functions merges two arrays of nodes. The last element of nodes1 and the first element of nodes2
     * are merged, if they are of the same type.
     *
     * This is done recursively until a TEMPLATE-Tag is found, which was inserted in this.replaceLines.
     * Using a TEMPLATE-Tag is a rather dirty hack, as it is allowed inside any other element, including <ul>.
     *
     * @param {Node[]} nodes1
     * @param {Node[]} nodes2
     * @returns {Node[]}
     */
    public replaceLinesMergeNodeArrays(nodes1: Node[], nodes2: Node[]): Node[] {
        if (nodes1.length === 0 || nodes2.length === 0) {
            return nodes1.length ? nodes1 : nodes2;
        }

        const out: Node[] = nodes1.slice(0, -1);
        const lastNode: Node = nodes1[nodes1.length - 1];
        const firstNode: Node = nodes2[0];
        if (lastNode.nodeType === TEXT_NODE && firstNode.nodeType === TEXT_NODE) {
            const newTextNode: Text = lastNode.ownerDocument!.createTextNode(lastNode.nodeValue! + firstNode.nodeValue);
            out.push(newTextNode);
        } else if (lastNode.nodeName === firstNode.nodeName) {
            const lastElement: Element = lastNode as Element;
            const newNode: HTMLElement = lastNode.ownerDocument!.createElement(lastNode.nodeName);

            for (const attr of Array.from(lastElement.attributes)) {
                newNode.setAttribute(attr.name, attr.value);
            }

            // Remove #text nodes inside of List elements (OL/UL), as they are confusing
            let lastChildren: Node[];
            let firstChildren: Node[];
            if (lastElement.nodeName === `OL` || lastElement.nodeName === `UL`) {
                lastChildren = Array.from(lastElement.childNodes).filter(child => child.nodeType === ELEMENT_NODE);
                firstChildren = Array.from(firstNode.childNodes).filter(child => child.nodeType === ELEMENT_NODE);
            } else {
                lastChildren = Array.from(lastElement.childNodes);
                firstChildren = Array.from(firstNode.childNodes);
            }

            const children = this.replaceLinesMergeNodeArrays(lastChildren, firstChildren) as Node[];
            for (const child of children) {
                newNode.appendChild(child);
            }

            out.push(newNode);
        } else {
            if (lastNode.nodeName !== `TEMPLATE`) {
                out.push(lastNode);
            }
            if (firstNode.nodeName !== `TEMPLATE`) {
                out.push(firstNode);
            }
        }

        return out.concat(nodes2.slice(1, nodes2.length));
    }

    /**
     * This returns the line number range in which changes (insertions, deletions) are encountered.
     * As in extractRangeByLineNumbers(), "to" refers to the line breaking element at the end, i.e. the start of the
     * following line.
     *
     * TODO: This should be possible without converting the HTML to a fragment by using a regex
     *
     * @param {string} diffHtml
     * @returns {LineRange}
     */
    public detectAffectedLineRange(diffHtml: string): LineRange | null {
        const cacheKey = djb2hash(diffHtml);
        const cached = this.diffCache.get(cacheKey);
        if (cached) {
            return cached;
        }

        const fragment = DomHelpers.htmlToFragment(diffHtml);

        this.insertInternalLineMarkers(fragment);

        const changes = fragment.querySelectorAll(`ins, del, .insert, .delete`);
        const firstChange = changes.item(0);
        const lastChange = changes.item(changes.length - 1);

        if (!firstChange || !lastChange) {
            // There are no changes
            return null;
        }

        const firstTrace = DomHelpers.getNodeContextTrace(firstChange);
        let lastLineNumberBefore = null;
        for (let j = firstTrace.length - 1; j >= 0 && lastLineNumberBefore === null; j--) {
            const prevSiblings = DomHelpers.getAllPrevSiblingsReversed(firstTrace[j]);
            for (let i = 0; i < prevSiblings.length && lastLineNumberBefore === null; i++) {
                lastLineNumberBefore = this.getLastLineNumberNode(prevSiblings[i]);
            }
        }

        const lastTrace = DomHelpers.getNodeContextTrace(lastChange);
        let firstLineNumberAfter = null;
        for (let j = lastTrace.length - 1; j >= 0 && firstLineNumberAfter === null; j--) {
            const nextSiblings = DomHelpers.getAllNextSiblings(lastTrace[j]);
            for (let i = 0; i < nextSiblings.length && firstLineNumberAfter === null; i++) {
                firstLineNumberAfter = this.getFirstLineNumberNode(nextSiblings[i]);
            }
        }

        const range = {
            from: parseInt(lastLineNumberBefore!.getAttribute(`data-line-number`) as string, 10),
            to: parseInt(firstLineNumberAfter!.getAttribute(`data-line-number`) as string, 10) - 1
        };

        this.diffCache.put(cacheKey, range);
        return range;
    }

    /**
     * Removes .delete-nodes and <del>-Tags (including content)
     * Removes the .insert-classes and the wrapping <ins>-Tags (while maintaining content)
     *
     * @param {string} html
     * @returns {string}
     */
    public diffHtmlToFinalText(html: string): string {
        const fragment = DomHelpers.htmlToFragment(html);

        const delNodes = fragment.querySelectorAll(`.delete, del`);
        for (let i = 0; i < delNodes.length; i++) {
            delNodes[i].parentNode!.removeChild(delNodes[i]);
        }

        const insNodes = fragment.querySelectorAll(`ins`);
        for (let i = 0; i < insNodes.length; i++) {
            const ins = insNodes[i];
            while (ins.childNodes.length > 0) {
                const child = ins.childNodes.item(0);
                ins.removeChild(child);
                ins.parentNode!.insertBefore(child, ins);
            }
            ins.parentNode!.removeChild(ins);
        }

        const insertNodes = fragment.querySelectorAll(`.insert`);
        for (let i = 0; i < insertNodes.length; i++) {
            DomHelpers.removeCSSClass(insertNodes[i], `insert`);
        }

        return this.serializeDom(fragment, false);
    }

    /**
     * Given a line numbered string (`oldHtml`), this method removes the text between `fromLine` and `toLine`
     * and replaces it by the string given by `newHTML`.
     * While replacing it, it also merges HTML tags that have been split to create the `newHTML` fragment,
     * indicated by the CSS classes .os-split-before and .os-split-after.
     *
     * This is used for creating the consolidated version of motions.
     *
     * @param {string} oldHtml
     * @param {string} newHTML
     * @param {number} fromLine
     * @param {number} toLine
     */
    public replaceLines(oldHtml: string, newHTML: string, fromLine: number, toLine: number): string {
        const data = this.extractRangeByLineNumbers(oldHtml, fromLine, toLine);
        const previousHtml = data.previousHtml + `<TEMPLATE></TEMPLATE>` + data.previousHtmlEndSnippet;
        const previousFragment = DomHelpers.htmlToFragment(previousHtml);
        const followingHtml = data.followingHtmlStartSnippet + `<TEMPLATE></TEMPLATE>` + data.followingHtml;
        const followingFragment = DomHelpers.htmlToFragment(followingHtml);
        const newFragment = DomHelpers.htmlToFragment(newHTML);

        if (data.html.length > 0 && data.html.substr(-1) === ` `) {
            this.insertDanglingSpace(newFragment);
        }

        let merged = this.replaceLinesMergeNodeArrays(
            Array.prototype.slice.call(previousFragment.childNodes),
            Array.prototype.slice.call(newFragment.childNodes)
        );
        merged = this.replaceLinesMergeNodeArrays(merged, Array.prototype.slice.call(followingFragment.childNodes));

        const mergedFragment = document.createDocumentFragment();
        for (let i = 0; i < merged.length; i++) {
            mergedFragment.appendChild(merged[i]);
        }

        const forgottenTemplates = mergedFragment.querySelectorAll(`TEMPLATE`);
        for (let i = 0; i < forgottenTemplates.length; i++) {
            const el = forgottenTemplates[i];
            el.parentNode!.removeChild(el);
        }

        const forgottenSplitClasses = mergedFragment.querySelectorAll(`.os-split-before, .os-split-after`);
        for (let i = 0; i < forgottenSplitClasses.length; i++) {
            DomHelpers.removeCSSClass(forgottenSplitClasses[i], `os-split-before`);
            DomHelpers.removeCSSClass(forgottenSplitClasses[i], `os-split-after`);
        }

        return this.serializeDom(mergedFragment, true);
    }

    public removeLines(oldHtml: string, fromLine: number, toLine: number): string {
        return this.replaceLines(oldHtml, ``, fromLine, toLine);
    }

    /**
     * Hint: as replaceLines does not work with specific points in the text anymore, but full lines, inserting
     * only works by using the workaround of selecting a "negative line", which results in no removal.
     *
     * Only mind that the inserted HTML needs to be wrapped in similar tags to the preceding text; that is, if the
     * previous text is within a UL/LI construct and insertedHtml is supposted to be inserted within that LI,
     * it needs to be wrapped accordingly.
     */
    public insertLines(oldHtml: string, atLineNumber: number, insertedHtml: string): string {
        return this.replaceLines(oldHtml, insertedHtml, atLineNumber, atLineNumber - 1);
    }

    /**
     * If the inline diff does not work, we fall back to showing the diff on a paragraph base, i.e. deleting the old
     * paragraph (adding the "deleted"-class) and adding the new one (adding the "added" class).
     * If the provided Text is not wrapped in HTML elements but inline text, the returned text is using
     * <ins>/<del>-tags instead of adding CSS-classes to the wrapping element.
     *
     * @param {string} oldText
     * @param {string} newText
     * @param {number|null} lineLength
     * @param {number|null} firstLineNumber
     * @returns {string}
     */
    private diffParagraphs(oldText: string, newText: string, lineLength: number, firstLineNumber: number): string {
        let oldTextWithBreaks: Element;
        let currChild: Element;

        if (lineLength !== null) {
            oldTextWithBreaks = this.lineNumberingService.insertLineNumbersNode(
                oldText,
                lineLength,
                null,
                firstLineNumber
            );
            newText = this.lineNumberingService.insertLineBreaksWithoutNumbers(newText, lineLength);
        } else {
            oldTextWithBreaks = document.createElement(`div`);
            oldTextWithBreaks.innerHTML = oldText;
        }
        newText = newText.replace(/^\s+/g, ``).replace(/\s+$/g, ``);
        const newTextWithBreaks = document.createElement(`div`);
        newTextWithBreaks.innerHTML = newText;

        for (let i = 0; i < oldTextWithBreaks.childNodes.length; i++) {
            currChild = oldTextWithBreaks.childNodes[i] as Element;
            if (currChild.nodeType === TEXT_NODE) {
                const wrapDel = document.createElement(`del`);
                oldTextWithBreaks.insertBefore(wrapDel, currChild);
                oldTextWithBreaks.removeChild(currChild);
                wrapDel.appendChild(currChild);
            } else {
                DomHelpers.addCSSClass(currChild, `delete`);
                this.removeColorStyles(currChild);
            }
        }
        for (let i = 0; i < newTextWithBreaks.childNodes.length; i++) {
            currChild = newTextWithBreaks.childNodes[i] as Element;
            if (currChild.nodeType === TEXT_NODE) {
                const wrapIns = document.createElement(`ins`);
                newTextWithBreaks.insertBefore(wrapIns, currChild);
                newTextWithBreaks.removeChild(currChild);
                wrapIns.appendChild(currChild);
            } else {
                DomHelpers.addCSSClass(currChild, `insert`);
                this.removeColorStyles(currChild);
            }
        }

        const mergedFragment = document.createDocumentFragment();
        let el: ChildNode;
        while ((el = oldTextWithBreaks.firstChild)) {
            oldTextWithBreaks.removeChild(el);
            mergedFragment.appendChild(el);
        }
        while ((el = newTextWithBreaks.firstChild)) {
            newTextWithBreaks.removeChild(el);
            mergedFragment.appendChild(el);
        }

        return this.serializeDom(mergedFragment, false);
    }

    /**
     * This function calculates the diff between two strings and tries to fix problems with the resulting HTML.
     * If lineLength and firstLineNumber is given, line numbers will be returned es well
     *
     * @param {string} htmlOld
     * @param {string} htmlNew
     * @param {number} lineLength - optional
     * @param {number} firstLineNumber - optional
     * @returns {string}
     */
    public diff(
        htmlOld: string,
        htmlNew: string,
        lineLength: number | null = null,
        firstLineNumber: number | null = null
    ): string {
        const cacheKey = lineLength + ` ` + firstLineNumber + ` ` + djb2hash(htmlOld) + djb2hash(htmlNew);
        const cached = this.diffCache.get(cacheKey);
        if (cached) {
            return cached;
        }

        // TODO: This is a workaround to make sure the first element of a amendment
        //       has a line number for correct display of amendments in front of list
        //       or block elements
        const htmlOldEl = document.createElement(`template`);
        const htmlNewEl = document.createElement(`template`);
        htmlNewEl.innerHTML = htmlNew;
        htmlOldEl.innerHTML = htmlOld;
        if (htmlNewEl.content.children[0] && !htmlNewEl.content.children[0].querySelector(`.os-line-number`)) {
            if (
                htmlNewEl.content.querySelector(`.os-line-number`) &&
                htmlOldEl.content.querySelector(`.os-line-number`)
            ) {
                const ln = htmlNewEl.content.querySelector(`.os-line-number`);
                htmlNewEl.content.children[0].childNodes[0].before(ln);
                htmlOldEl.content.children[0].querySelector(`.os-line-number`).remove();

                htmlNew = htmlNewEl.innerHTML;
                htmlOld = htmlOldEl.innerHTML;
            }
        }

        // os-split-after should not be considered for detecting changes in paragraphs, so we strip it here
        // and add it afterwards.
        // We only do this for P for now, as for more complex types like UL/LI that tend to be nestend,
        // information would get lost by this that we will need to recursively merge it again later on.
        let isSplitAfter = false;
        let isSplitBefore = false;
        htmlOld = htmlOld.replace(
            /(\s*<(?:p|ul|ol|li|blockquote|div)[^>]+class\s*=\s*["'][^"']*)os-split-after */gi,
            (_match: string, beginning: string): string => {
                isSplitAfter = true;
                return beginning;
            }
        );
        htmlNew = htmlNew.replace(
            /(\s*<(?:p|ul|ol|li|blockquote|div)[^>]+class\s*=\s*["'][^"']*)os-split-after */gi,
            (_match: string, beginning: string): string => {
                isSplitAfter = true;
                return beginning;
            }
        );
        htmlOld = htmlOld.replace(
            /(\s*<(?:p|ul|ol|li|blockquote|div)[^>]+class\s*=\s*["'][^"']*)os-split-before */gi,
            (_match: string, beginning: string): string => {
                isSplitBefore = true;
                return beginning;
            }
        );
        htmlNew = htmlNew.replace(
            /(\s*<(?:p|ul|ol|li|blockquote|div)[^>]+class\s*=\s*["'][^"']*)os-split-before */gi,
            (_match: string, beginning: string): string => {
                isSplitBefore = true;
                return beginning;
            }
        );

        // Performing the actual diff
        const str = this.diffString(htmlOld, htmlNew);
        let diffUnnormalized = str.replace(/^\s+/g, ``).replace(/\s+$/g, ``).replace(/ {2,}/g, ` `);

        diffUnnormalized = this.fixWrongChangeDetection(diffUnnormalized);

        // Remove <del> tags that only delete line numbers
        // We need to do this before removing </del><del> as done in one of the next statements
        diffUnnormalized = diffUnnormalized.replace(
            /<del>(((<BR CLASS="os-line-break">)<\/del><del>)?(<span[^>]+os-line-number[^>]+?>)(\s|<\/?del>)*<\/span>)<\/del>/gi,
            (_found: string, _tag: string, _brWithDel: string, plainBr: string, span: string): string =>
                (plainBr !== undefined ? plainBr : ``) + span + ` </span>`
        );

        // Merging individual insert/delete statements into bigger blocks
        diffUnnormalized = diffUnnormalized.replace(/<\/ins><ins>/gi, ``).replace(/<\/del><del>/gi, ``);

        // If we have a <del>deleted word</del>LINEBREAK<ins>new word</ins>, let's assume that the insertion
        // was actually done in the same line as the deletion.
        // We don't have the LINEBREAK-markers in the new string, hence we can't be a 100% sure, but
        // this will probably the more frequent case.
        // This only really makes a differences for change recommendations anyway, where we split the text into lines
        // Hint: if there is no deletion before the line break, we have the same issue, but cannot solve this here.
        diffUnnormalized = diffUnnormalized.replace(
            /(<\/del>)(<BR CLASS="os-line-break"><span[^>]+os-line-number[^>]+?>\s*<\/span>)(<ins>[\s\S]*?<\/ins>)/gi,
            (_found: string, del: string, br: string, ins: string): string => del + ins + br
        );

        // If only a few characters of a word have changed, don't display this as a replacement of the whole word,
        // but only of these specific characters
        diffUnnormalized = diffUnnormalized.replace(
            /<del>([a-z0-9,_-]* ?)<\/del><ins>([a-z0-9,_-]* ?)<\/ins>/gi,
            (_found: string, oldText: string, newText: string): string => {
                let foundDiff = false;
                let commonStart = ``;
                let commonEnd = ``;
                let remainderOld = oldText;
                let remainderNew = newText;

                while (remainderOld.length > 0 && remainderNew.length > 0 && !foundDiff) {
                    if (remainderOld[0] === remainderNew[0]) {
                        commonStart += remainderOld[0];
                        remainderOld = remainderOld.substr(1);
                        remainderNew = remainderNew.substr(1);
                    } else {
                        foundDiff = true;
                    }
                }

                foundDiff = false;
                while (remainderOld.length > 0 && remainderNew.length > 0 && !foundDiff) {
                    if (remainderOld[remainderOld.length - 1] === remainderNew[remainderNew.length - 1]) {
                        commonEnd = remainderOld[remainderOld.length - 1] + commonEnd;
                        remainderNew = remainderNew.substr(0, remainderNew.length - 1);
                        remainderOld = remainderOld.substr(0, remainderOld.length - 1);
                    } else {
                        foundDiff = true;
                    }
                }

                let out = commonStart;
                if (remainderOld !== ``) {
                    out += `<del>` + remainderOld + `</del>`;
                }
                if (remainderNew !== ``) {
                    out += `<ins>` + remainderNew + `</ins>`;
                }
                out += commonEnd;

                return out;
            }
        );

        // Replace spaces in line numbers by &nbsp;
        diffUnnormalized = diffUnnormalized.replace(
            /<span[^>]+os-line-number[^>]+?>\s*<\/span>/gi,
            (found: string): string => found.toLowerCase().replace(/> <\/span/gi, `>&nbsp;</span`)
        );

        // <P><ins>NEUE ZEILE</P>\n<P></ins> => <ins><P>NEUE ZEILE</P>\n</ins><P>
        diffUnnormalized = diffUnnormalized.replace(
            /<(p|div|blockquote|li)([^>]*)><(ins|del)>([\s\S]*?)<\/\1>(\s*)<(p|div|blockquote|li)([^>]*)><\/\3>/gi,
            (
                _whole: string,
                block1: string,
                att1: string,
                insDel: string,
                content: string,
                space: string,
                block2: string,
                att2: string
            ): string =>
                `<` +
                insDel +
                `><` +
                block1 +
                att1 +
                `>` +
                content +
                `</` +
                block1 +
                `>` +
                space +
                `</` +
                insDel +
                `><` +
                block2 +
                att2 +
                `>`
        );

        // If larger inserted HTML text contains block elements, we separate the inserted text into
        // inline <ins> elements and "insert"-class-based block elements.
        // <ins>...<div>...</div>...</ins> => <ins>...</ins><div class="insert">...</div><ins>...</ins>
        diffUnnormalized = diffUnnormalized.replace(
            /<(ins|del)>([\s\S]*?)<\/\1>/gi,
            (whole: string, insDel: string): string => {
                const modificationClass = insDel.toLowerCase() === `ins` ? `insert` : `delete`;
                return whole.replace(
                    /(<(p|div|blockquote|ul|ol|li)[^>]*>)([\s\S]*?)(<\/\2>)/gi,
                    (_whole2: string, opening: string, _blockTag: string, content: string, closing: string): string => {
                        const modifiedTag = DomHelpers.addClassToHtmlTag(opening, modificationClass);
                        return `</` + insDel + `>` + modifiedTag + content + closing + `<` + insDel + `>`;
                    }
                );
            }
        );

        // <del>deleted text</P></del><ins>inserted.</P></ins> => <del>deleted text</del><ins>inserted.</ins></P>
        diffUnnormalized = diffUnnormalized.replace(
            /<del>([^<]*)<\/(p|div|blockquote|li)><\/del><ins>([^<]*)<\/\2>(\s*)<\/ins>/gi,
            (_whole: string, deleted: string, tag: string, inserted: string, white: string): string =>
                `<del>` + deleted + `</del><ins>` + inserted + `</ins></` + tag + `>` + white
        );

        // <ins>...</p><p>...</ins> => <ins>...</ins></p><p><ins>...</ins>
        diffUnnormalized = diffUnnormalized.replace(
            /<(ins|del)>([\s\S]*?)<\/(p|div|blockquote|li)>\s*<(p|div|blockquote|li)([^>]*)>([\s\S]*?)<\/\1>/gi,
            (
                whole: string,
                insDel: string,
                content1: string,
                blockEnd: string,
                blockStart: string,
                blockAttrs: string,
                content2: string
            ): string => {
                if (DomHelpers.isValidInlineHtml(content1) && DomHelpers.isValidInlineHtml(content2)) {
                    return (
                        `<` +
                        insDel +
                        `>` +
                        content1 +
                        `</` +
                        insDel +
                        `></` +
                        blockEnd +
                        `>` +
                        `<` +
                        blockStart +
                        blockAttrs +
                        `><` +
                        insDel +
                        `>` +
                        content2 +
                        `</` +
                        insDel +
                        `>`
                    );
                } else {
                    return whole;
                }
            }
        );

        // Cleanup leftovers from the operation above, when <ins></ins>-tags ore <ins> </ins>-tags are left
        // around block tags. It should be safe to remove them and just leave the whitespaces.
        diffUnnormalized = diffUnnormalized.replace(
            /<(ins|del)>(\s*)<\/\1>/gi,
            (_whole: string, _insDel: string, space: string): string => space
        );

        // <del></p><ins> Added text</p></ins> -> <ins> Added text</ins></p>
        diffUnnormalized = diffUnnormalized.replace(
            /<del><\/(p|div|blockquote|li)><\/del><ins>([\s\S]*?)<\/\1>(\s*)<\/ins>/gi,
            (_whole: string, blockTag: string, content: string, space: string): string =>
                `<ins>` + content + `</ins></` + blockTag + `>` + space
        );

        // <ins><STRONG></ins>formatted<ins></STRONG></ins> => <del>formatted</del><ins><STRONG>formatted</STRONG></ins>
        diffUnnormalized = diffUnnormalized.replace(
            /<ins><(span|strong|em|b|i|u|s|a|small|big|sup|sub)( [^>]*)?><\/ins>([^<]*)<ins><\/\1><\/ins>/gi,
            (_whole: string, inlineTag: string, tagAttributes: string, content: string): string =>
                `<del>` +
                content +
                `</del>` +
                `<ins><` +
                inlineTag +
                (tagAttributes ? tagAttributes : ``) +
                `>` +
                content +
                `</` +
                inlineTag +
                `></ins>`
        );

        // <del><STRONG></del>formatted<del></STRONG></del> => <del><STRONG>formatted</STRONG></del><ins>formatted</ins>
        diffUnnormalized = diffUnnormalized.replace(
            /<del><(span|strong|em|b|i|u|s|a|small|big|sup|sub)( [^>]*)?><\/del>([^<]*)<del><\/\1><\/del>/gi,
            (_whole: string, inlineTag: string, tagAttributes: string, content: string): string =>
                `<del><` +
                inlineTag +
                (tagAttributes ? tagAttributes : ``) +
                `>` +
                content +
                `</` +
                inlineTag +
                `></del>` +
                `<ins>` +
                content +
                `</ins>`
        );

        // <del>Ebene 3 <UL><LI></del><span class="line-number-4 os-line-number" contenteditable="false" data-line-number="4">&nbsp;</span><ins>Ebene 3a <UL><LI></ins>
        // => <del>Ebene 3 </del><ins>Ebene 3a </ins><UL><LI><span class="line-number-4 os-line-number" contenteditable="false" data-line-number="4">&nbsp;</span>
        diffUnnormalized = diffUnnormalized.replace(
            /<del>([^<]+)((?:<(?:ul|ol|li)>)+)<\/del>(<span[^>]*os-line-number[^>]*>(?:&nbsp;|\s)<\/span>)?<ins>([^<]+)\2<\/ins>/gi,
            (_whole: string, del: string, block: string, ln: string, ins: string): string =>
                `<del>` + del + `</del><ins>` + ins + `</ins>` + block + ln
        );

        // </p> </ins> -> </ins></p>
        diffUnnormalized = diffUnnormalized.replace(
            /(<\/(p|div|blockquote|li)>)(\s*)<\/(ins|del)>/gi,
            (_whole: string, ending: string, _blockTag: string, space: string, insdel: string): string =>
                `</` + insdel + `>` + ending + space
        );

        // <ul><li><ul><li>...</li><del></UL></LI></UL></del><LI class="insert">d</LI><LI class="insert">e</LI><ins></UL></LI></UL></ins>
        // => <ul><li><ul><li>...</li><LI class="insert">d</LI><LI class="insert">e</LI></UL></LI></UL>
        diffUnnormalized = diffUnnormalized.replace(
            /<del>((<\/(li|ul|ol)>)+)<\/del>((<li class="insert">.*?<\/li>)*)<ins>\1<\/ins>/i,
            (_whole: string, ending: string, _e1: string, _e2: string, insertedLis: string, _e3: string) =>
                insertedLis + ending
        );

        // <UL><LI><UL><LI><UL><LI><del>Ebene 4</LI></UL></LI></UL></LI></UL></del><ins>Ebene 5</LI></UL></LI></UL></LI></UL></ins>
        // => <UL><LI><UL><LI><UL><LI><del>Ebene 4</del><ins>Ebene 5</ins></LI></UL></LI></UL></LI></UL>
        diffUnnormalized = diffUnnormalized.replace(
            /<del>([^<>]*)((<\/(li|ul|ol)>)+)<\/del><ins>([^<>]*)\2<\/ins>/i,
            (_whole, del, end, _ul, _u2, ins) => `<del>` + del + `</del><ins>` + ins + `</ins>` + end
        );

        let diff: string;
        if (this.diffDetectBrokenDiffHtml(diffUnnormalized)) {
            diff = this.diffParagraphs(htmlOld, htmlNew, lineLength!, firstLineNumber!);
        } else {
            let node: Element = document.createElement(`div`);
            node.innerHTML = diffUnnormalized;
            diff = node.innerHTML;

            if (lineLength !== null && firstLineNumber !== null) {
                node = this.lineNumberingService.insertLineNumbersNode(diff, lineLength, null, firstLineNumber);
                diff = node.innerHTML;
            }
        }

        if (isSplitAfter) {
            diff = DomHelpers.addClassToLastNode(diff, `os-split-after`);
        }
        if (isSplitBefore) {
            diff = DomHelpers.addClassToLastNode(diff, `os-split-before`);
        }

        this.diffCache.put(cacheKey, diff);
        return diff;
    }

    public changeHasCollissions(change: ViewUnifiedChange, changes: ViewUnifiedChange[]): boolean {
        return (
            changes.filter(
                (otherChange: ViewUnifiedChange) =>
                    otherChange.getChangeId() !== change.getChangeId() &&
                    ((otherChange.getLineFrom() >= change.getLineFrom() &&
                        otherChange.getLineFrom() <= change.getLineTo()) ||
                        (otherChange.getLineTo() >= change.getLineFrom() &&
                            otherChange.getLineTo() <= change.getLineTo()) ||
                        (otherChange.getLineFrom() <= change.getLineFrom() &&
                            otherChange.getLineTo() >= change.getLineTo()))
            ).length > 0
        );
    }

    public sortChangeRequests(changes: ViewUnifiedChange[]): ViewUnifiedChange[] {
        return changes.sort((change1: ViewUnifiedChange, change2: ViewUnifiedChange): number => {
            if (change1.getLineFrom() === change2.getLineFrom()) {
                return change1.getIdentifier() < change2.getIdentifier() ? -1 : 1;
            }
            return change1.getLineFrom() - change2.getLineFrom();
        });
    }

    /**
     * Applies all given changes to the motion and returns the (line-numbered) text
     *
     * @param {string} motionHtml
     * @param {ViewUnifiedChange[]} changes
     * @param {number} lineLength
     * @param {boolean} showAllCollisions
     * @param {number} highlightLine
     * @param {number} firstLine
     */
    public getTextWithChanges(
        motionHtml: string,
        changes: ViewUnifiedChange[],
        lineLength: number,
        showAllCollisions: boolean,
        highlightLine?: number,
        firstLine = 1
    ): string {
        let html = motionHtml;

        changes = changes.filter(change => !change.isTitleChange());
        // Changes need to be applied from the bottom up, to prevent conflicts with changing line numbers.
        changes = this.sortChangeRequests(changes).reverse();

        if (showAllCollisions) {
            let lastReplacedLine: number = null;

            changes.forEach(change => {
                html = this.lineNumberingService.insertLineNumbers({ html, lineLength, firstLine: firstLine });

                if (this.changeHasCollissions(change, changes)) {
                    // In case of colliding amendments, we remove the original text first before inserting the amendments one by one.
                    // Note: if amendment 1 affects line 3-5, we remove 3-5. If amendment 2 affects line 2-4, we only need to remove
                    // line 2, as 3-5 is already removed. If Amendment 3 affects 2-4 too, we don't have to remove anything anymore.

                    let removeUntil = change.getLineTo();
                    if (lastReplacedLine !== null && lastReplacedLine <= removeUntil) {
                        removeUntil = lastReplacedLine - 1;
                    }
                    if (removeUntil >= change.getLineFrom()) {
                        html = this.removeLines(html, change.getLineFrom(), removeUntil);
                        html = this.lineNumberingService.insertLineNumbers({ html, lineLength, firstLine: firstLine });
                    }

                    const type =
                        ` data-change-type="` +
                        ((type: ViewUnifiedChangeType) => {
                            switch (type) {
                                case ViewUnifiedChangeType.TYPE_AMENDMENT:
                                    return `amendment`;
                                case ViewUnifiedChangeType.TYPE_CHANGE_RECOMMENDATION:
                                    return `recommendation`;
                                default:
                                    return `unknown`;
                            }
                        })(change.getChangeType()) +
                        `"`;
                    const changeId = ` data-change-id="` + DomHelpers.replaceHtmlEntities(change.getChangeId()) + `"`;
                    const title = ` data-title="` + DomHelpers.replaceHtmlEntities(change.getTitle()) + `"`;
                    const ident = ` data-identifier="` + DomHelpers.replaceHtmlEntities(change.getIdentifier()) + `"`;
                    const lineFrom = ` data-line-from="` + change.getLineFrom().toString(10) + `"`;
                    const lineTo = ` data-line-to="` + change.getLineTo().toString(10) + `"`;
                    const opAttrs = type + ident + title + changeId + lineFrom + lineTo;
                    const opTag = `<div class="os-colliding-change os-colliding-change-holder"` + opAttrs + `>`;
                    const insertingHtml = opTag + change.getChangeNewText() + `</div>`;

                    html = this.insertLines(html, change.getLineFrom(), insertingHtml);

                    lastReplacedLine = change.getLineFrom();
                } else {
                    html = this.replaceLines(html, change.getChangeNewText(), change.getLineFrom(), change.getLineTo());
                }
            });
        } else {
            changes.forEach((change: ViewUnifiedChange) => {
                html = this.lineNumberingService.insertLineNumbers({ html, lineLength, firstLine: firstLine });
                html = this.replaceLines(html, change.getChangeNewText(), change.getLineFrom(), change.getLineTo());
            });
        }

        html = this.lineNumberingService.insertLineNumbers({
            html,
            lineLength,
            highlight: highlightLine,
            firstLine: firstLine
        });

        return html;
    }

    public formatOsCollidingChanges(
        html: string,
        formatter: (el: HTMLDivElement, type: string, identifier: string, title: string, changeId: string) => void
    ): string {
        const frag = DomHelpers.htmlToFragment(html);

        frag.querySelectorAll(`.os-colliding-change`).forEach((el: HTMLElement): void => {
            formatter.bind(this)(el as HTMLDivElement);
        });

        return DomHelpers.fragmentToHtml(frag);
    }

    public formatOsCollidingChanges_wysiwyg_cb(el: HTMLDivElement): void {
        // This callback will only do anything the first time it's called on a generated document.
        // After that, the document should stay as it is. Hence, we remove the ol-colliding-change class
        // from the holder element to the comment.
        if (el.classList.contains(`os-colliding-change-comment`)) {
            return;
        }
        const type = el.getAttribute(`data-change-type`) ?? ``;
        const identifier = el.getAttribute(`data-identifier`) ?? ``;
        const lineFrom = el.getAttribute(`data-line-from`) ?? ``;
        const lineTo = el.getAttribute(`data-line-to`) ?? ``;

        // true if either it's a DIV with the class, or a P with a child-SPAN with the class
        const nodeIsColliding = (node: ChildNode): boolean => {
            if (!node || !node.nodeName) {
                return false;
            }
            if (node.nodeName === `DIV` && (node as HTMLDivElement).classList.contains(`os-colliding-change-holder`)) {
                return true;
            }
            if (node.nodeName === `P`) {
                for (let i = 0; i < node.childNodes.length; i++) {
                    const child = node.childNodes.item(i);
                    if (
                        child &&
                        child.nodeName === `SPAN` &&
                        (child as HTMLSpanElement).classList.contains(`os-colliding-change-holder`)
                    ) {
                        return true;
                    }
                }
            }
            return false;
        };

        const prevIsColliding = nodeIsColliding(el.previousSibling);
        const nextIsColliding = nodeIsColliding(el.nextSibling);

        // Once we start editing, the holder element should not hold the class deciding if to show a warning anymore.
        // The reason is that it might be hard to get rid of it while editing, yet we still want to be able to get rid
        // of the collision warning sign if the collision has been resolved
        el.classList.remove(`os-colliding-change`);

        // In a P, we want to have the collision markers inserted within the P's margins
        let toInsertElement: HTMLElement, commentsInInlineElement: boolean;
        if (el.children.length === 1 && el.firstChild.nodeName === `P`) {
            toInsertElement = el.firstChild as HTMLElement;
            commentsInInlineElement = true;
        } else {
            toInsertElement = el;
            commentsInInlineElement = false;
        }

        // Change recommendations do not have a title
        let strTitle;
        if (type === `recommendation`) {
            strTitle = this.translate.instant(`Change recommendation`);
        } else {
            strTitle = identifier;
        }
        if (parseInt(lineTo, 10) === parseInt(lineFrom, 10)) {
            strTitle += ` (` + this.translate.instant(`Line`) + ` ` + lineFrom + `)`;
        } else {
            strTitle += ` (` + this.translate.instant(`Line`) + ` ` + lineFrom + ` - ` + lineTo + `)`;
        }

        const comment = el.ownerDocument.createElement(commentsInInlineElement ? `span` : `div`);
        comment.classList.add(`os-colliding-change`);
        comment.classList.add(`os-colliding-change-comment`);
        comment.innerHTML = `&lt;` + DomHelpers.replaceHtmlEntities(`!-- ### ` + strTitle + ` ### --`) + `&gt;`;
        if (commentsInInlineElement) {
            comment.innerHTML = comment.innerHTML + `<br>`;
        }
        if (!prevIsColliding) {
            comment.innerHTML = `==============<br>` + comment.innerHTML;
        }
        if (toInsertElement.firstChild) {
            toInsertElement.insertBefore(comment, toInsertElement.firstChild);
        } else {
            toInsertElement.appendChild(comment);
        }

        if (!nextIsColliding) {
            const terminatorComment = el.ownerDocument.createElement(commentsInInlineElement ? `span` : `div`);
            terminatorComment.innerHTML = `==============`;
            el.appendChild(terminatorComment);
        }
    }

    /**
     * This is used to extract affected lines of a paragraph with the possibility to show the context (lines before
     * and after) the changed lines and displaying the line numbers.
     *
     * @param {number} paragraphNo The paragraph number
     * @param {string} origText The original text - needs to be line-numbered
     * @param {string} newText The changed text
     * @param {number} lineLength the line length
     * @param {ViewUnifiedChange[]} changeRecos
     * @return {DiffLinesInParagraph|null}
     */
    public getAmendmentParagraphsLines(
        paragraphNo: number,
        origText: string,
        newText: string,
        lineLength: number,
        changeRecos?: ViewUnifiedChange[]
    ): DiffLinesInParagraph | null {
        const paragraph_line_range: LineNumberRange = this.lineNumberingService.getLineNumberRange(origText);
        let diff = this.diff(origText, newText);
        const affected_lines = this.detectAffectedLineRange(diff) as LineRange;

        /**
         * If the affect line has change recos, overwirte the diff with the change reco
         */
        if (changeRecos && changeRecos.length) {
            const recoToThisLine = changeRecos.find(reco => reco.getLineFrom() === affected_lines.from);
            if (recoToThisLine) {
                diff = this.diff(origText, recoToThisLine.getChangeNewText());
            }
        }

        if (affected_lines === null) {
            return null;
        }

        let textPre = ``;
        let textPost = ``;
        if (affected_lines.from > paragraph_line_range.from!) {
            textPre = this.formatDiffWithLineNumbers(
                this.extractRangeByLineNumbers(diff, paragraph_line_range.from!, affected_lines.from - 1),
                lineLength,
                paragraph_line_range.from!
            );
        }
        if (paragraph_line_range.to! > affected_lines.to) {
            textPost = this.formatDiffWithLineNumbers(
                this.extractRangeByLineNumbers(diff, affected_lines.to + 1, paragraph_line_range.to!),
                lineLength,
                affected_lines.to + 1
            );
        }
        const text = this.formatDiffWithLineNumbers(
            this.extractRangeByLineNumbers(diff, affected_lines.from, affected_lines.to),
            lineLength,
            affected_lines.from
        );

        return {
            paragraphNo,
            paragraphLineFrom: paragraph_line_range.from,
            paragraphLineTo: paragraph_line_range.to,
            diffLineFrom: affected_lines.from,
            diffLineTo: affected_lines.to,
            textPre,
            text,
            textPost
        } as DiffLinesInParagraph;
    }

    /**
     * Returns the HTML with the changes, optionally with a highlighted line.
     * The original motion needs to be provided.
     *
     * @param {LineNumberedString} html
     * @param {ViewUnifiedChange} change
     * @param {number} lineLength
     * @param {number} highlight
     * @returns {string}
     */
    public getChangeDiff(
        html: LineNumberedString,
        change: ViewUnifiedChange,
        lineLength: number,
        highlight?: number
    ): string {
        let data: ExtractedContent;
        let oldText: string;

        try {
            data = this.extractRangeByLineNumbers(html, change.getLineFrom(), change.getLineTo());
            oldText =
                data.outerContextStart +
                data.innerContextStart +
                data.html +
                data.innerContextEnd +
                data.outerContextEnd;
        } catch (e) {
            // This only happens (as far as we know) when the motion text has been altered (shortened)
            // without modifying the change recommendations accordingly.
            // That's a pretty serious inconsistency that should not happen at all,
            // we're just doing some basic damage control here.
            const msg =
                this.translate.instant(`Inconsistent data.`) +
                ` ` +
                this.translate.instant(
                    `A change recommendation or amendment is probably referring to a non-existant line number.`
                ) +
                ` ` +
                this.translate.instant(
                    `If it is an amendment, you can back up its content when editing it and delete it afterwards.`
                );
            return `<em style="color: red; font-weight: bold;">` + msg + `</em>`;
        }

        oldText = this.lineNumberingService.insertLineNumbers({
            html: oldText,
            lineLength,
            firstLine: change.getLineFrom()
        });
        let diff = this.diff(oldText, change.getChangeNewText());

        // If an insertion makes the line longer than the line length limit, we need two line breaking runs:
        // - First, for the official line numbers, ignoring insertions (that's been done some lines before)
        // - Second, another one to prevent the displayed including insertions to exceed the page width
        diff = this.lineNumberingService.insertLineBreaksWithoutNumbers(diff, lineLength, true);

        if (highlight && highlight > 0) {
            diff = this.lineNumberingService.highlightLine(diff, highlight);
        }

        const origBeginning = data.outerContextStart + data.innerContextStart;
        if (diff.toLowerCase().indexOf(origBeginning.toLowerCase()) === 0) {
            // Add "merge-before"-css-class if the first line begins in the middle of a paragraph. Used for PDF.
            diff =
                DomHelpers.addCSSClassToFirstTag(origBeginning, `merge-before`) + diff.substring(origBeginning.length);
        }

        return diff;
    }

    /**
     * Returns the remainder text of the motion after the last change
     *
     * @param {LineNumberedString} motionHtml
     * @param {ViewUnifiedChange[]} changes
     * @param {number} lineLength
     * @param {number} highlight
     * @param {LineRange} lineRange
     * @returns {string}
     */
    public getTextRemainderAfterLastChange(
        motionHtml: LineNumberedString,
        changes: ViewUnifiedChange[],
        lineLength: number,
        highlight?: number,
        lineRange?: LineRange
    ): string {
        let maxLine = 0;
        changes.forEach((change: ViewUnifiedChange) => {
            if (change.getLineTo() > maxLine) {
                maxLine = change.getLineTo();
            }
        }, 0);

        if (changes.length === 0 && !lineRange) {
            return motionHtml;
        }

        let data: ExtractedContent;

        try {
            data = this.extractRangeByLineNumbers(
                motionHtml,
                Math.max(maxLine + 1, lineRange?.from || 1),
                lineRange?.to ?? null
            );
        } catch (e) {
            // This only happens (as far as we know) when the motion text has been altered (shortened)
            // without modifying the change recommendations accordingly.
            // That's a pretty serious inconsistency that should not happen at all,
            // we're just doing some basic damage control here.
            const msg =
                this.translate.instant(`Inconsistent data.`) +
                ` ` +
                this.translate.instant(
                    `A change recommendation or amendment is probably referring to a non-existant line number.`
                );
            return `<em style="color: red; font-weight: bold;">` + msg + `</em>`;
        }

        let html: string;
        if (data.html !== ``) {
            // Add "merge-before"-css-class if the first line begins in the middle of a paragraph. Used for PDF.
            html =
                DomHelpers.addCSSClassToFirstTag(data.outerContextStart + data.innerContextStart, `merge-before`) +
                data.html +
                data.innerContextEnd +
                data.outerContextEnd;
            html = this.lineNumberingService.insertLineNumbers({ html, lineLength, highlight, firstLine: maxLine + 1 });
        } else {
            // Prevents empty lines at the end of the motion
            html = ``;
        }
        return html;
    }

    /**
     * Extracts a renderable HTML string representing the given line number range of this motion text
     *
     * @param {LineNumberedString} motionText
     * @param {LineRange} lineRange
     * @param {boolean} lineNumbers - weather to add line numbers to the returned HTML string
     * @param {number} lineLength
     * @param {number|null} highlightedLine
     */
    public extractMotionLineRange(
        motionText: LineNumberedString,
        lineRange: LineRange,
        lineNumbers: boolean,
        lineLength: number,
        highlightedLine?: number
    ): string {
        const extracted = this.extractRangeByLineNumbers(motionText, lineRange.from, lineRange.to);
        let html =
            extracted.outerContextStart +
            extracted.innerContextStart +
            extracted.html +
            extracted.innerContextEnd +
            extracted.outerContextEnd;
        if (lineNumbers) {
            html = this.lineNumberingService.insertLineNumbers({
                html,
                lineLength,
                highlight: highlightedLine,
                firstLine: lineRange.from
            });
        }
        return html;
    }
}
