// Material theming import
@use '@angular/material' as mat;

/**
 *  Mixin-style to style global classes and tags with theme-related colors.
 */
@mixin os-component-themes($theme) {
    $primary: map-get($theme, primary);
    $accent: map-get($theme, accent);
    $warn: map-get($theme, warn);
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark-theme: map-get($theme, is-dark);

    h1,
    h3.accent {
        color: mat.get-color-from-palette(if($is-dark-theme, $accent, $primary));
    }

    a {
        color: mat.get-color-from-palette(if($is-dark-theme, $accent, $primary));
    }

    .underlined-links a {
        text-decoration: solid underline mat.get-color-from-palette(if($is-dark-theme, $accent, $primary)) 0.15em;

        &:hover {
            text-decoration: solid underline mat.get-color-from-palette(if($is-dark-theme, $accent, $primary)) 0.175em;
        }
    }

    .anchor-button {
        color: mat.get-color-from-palette($foreground, text) !important;
    }

    .accent,
    .accent-text {
        color: mat.get-color-from-palette($accent);
    }

    .primary-accent-by-theme {
        color: mat.get-color-from-palette(if($is-dark-theme, $accent, $primary));
    }

    /**
     * normal current mat bg color with primary text color.
     * important is required to overwrite materials default
     * button color
     */
    .custom-table-header,
    .background-default {
        background: mat.get-color-from-palette($background, background) !important;
    }

    .disabled {
        color: mat.get-color-from-palette($foreground, disabled-button);
    }

    .fake-disabled {
        background: mat.get-color-from-palette($background, unselected-chip) !important;
        opacity: 1 !important;

        .mat-button-wrapper {
            .mat-icon {
                color: mat.get-color-from-palette($foreground, disabled-button) !important;
                svg path {
                    fill: mat.get-color-from-palette($foreground, disabled-button) !important;
                }
            }
        }
    }

    .error,
    .warn {
        color: mat.get-color-from-palette($warn);
    }

    .outline-border-bottom {
        border-bottom: 1px solid $os-outline;
    }

    /* motion list/detail view */
    .mat-chip-list.user .mat-chip {
        color: mat.get-color-from-palette($foreground, text);
        background: mat.get-color-from-palette($background, card);
        border-color: mat.get-color-from-palette($background, selected-button);
    }

    .os-amount-chip {
        background: mat.get-color-from-palette($background, selected-button);
        color: mat.get-color-from-palette($foreground, text);
    }

    .subtitle-text {
        color: mat.get-color-from-palette(if($is-dark-theme, $accent, $primary));
    }

    .main-nav-color {
        color: mat.get-color-from-palette($foreground, secondary-text);
    }

    .submitters-line {
        color: mat.get-color-from-palette($foreground, secondary-text);
    }

    .subtitle {
        @extend .subtitle-nocolor;
        color: mat.get-color-from-palette($foreground, secondary-text);
    }

    .user-subtitle {
        color: mat.get-color-from-palette($foreground, secondary-text);
    }
    /* TODO(mdc-migration): The following rule targets internal classes of card that may no longer apply for the MDC version.*/
    mat-card-header {
        background-color: mat.get-color-from-palette($background, app-bar);
    }

    /* drag & drop views */
    .node-content-wrapper {
        background-color: mat.get-color-from-palette($background, app-bar);
    }

    /* projector components */
    .backgroundColorAccent {
        background-color: mat.get-color-from-palette($accent);
        color: mat.get-color-from-palette($accent, default-contrast) !important;
    }

    .backgroundColorSelected {
        background-color: rgba(0, 0, 0, 0.155);
        color: mat.get-color-from-palette($foreground, text) !important;
    }

    .backgroundColorLight {
        background-color: mat.get-color-from-palette($background, hover);
        color: mat.get-color-from-palette($foreground, text) !important;
    }

    .icon {
        color: mat.get-color-from-palette($foreground, icon);
    }

    /** Custom themes for NGrid. Could be an own file if it gets more */
    .pbl-ngrid-container {
        background: mat.get-color-from-palette($background, card);
    }

    .pbl-ngrid-no-data {
        color: mat.get-color-from-palette($foreground, secondary-text);
    }

    /**
     * CLEANUP:
     * whole theme-related stylesheets can be replaced using classes like this one
     */
    .outlined {
        background: mat.get-color-from-palette($background, background);
    }

    .outlined-hover {
        @extend .outlined;
        &:hover {
            background-color: mat.get-color-from-palette($background, selected-button);
        }
    }

    .outlined-border {
        @extend .outlined;
        border: 1px solid mat.get-color-from-palette($background, selected-button);
    }

    .background-default {
        background: mat.get-color-from-palette($background, background);
        color: mat.get-color-from-palette($foreground, text);
    }

    .background-hover {
        &:hover {
            background-color: mat.get-color-from-palette($background, background);
        }
    }

    .background-primary {
        background: mat.get-color-from-palette($primary) !important;
        color: mat.get-color-from-palette($primary, default-contrast) !important;
    }

    .background-primary-darker {
        background: mat.get-color-from-palette($primary, 700);
        color: mat.get-color-from-palette($primary, default-contrast) !important;
    }

    .background-primary-darkest {
        background: mat.get-color-from-palette($primary, 900);
        color: mat.get-color-from-palette($primary, default-contrast) !important;
    }

    .background-accent {
        background: mat.get-color-from-palette($accent) !important;
        color: mat.get-color-from-palette($accent, default-contrast) !important;

        a {
            color: mat.get-color-from-palette($accent, default-contrast) !important;
        }
    }

    .background-warn {
        background: mat.get-color-from-palette($warn) !important;
    }

    .background-card {
        background: mat.get-color-from-palette($background, card);
        color: mat.get-color-from-palette($foreground, text);
    }

    .collapsed-card-content {
        &::after {
            background: linear-gradient(rgba(255, 255, 255, 0), mat.get-color-from-palette($background, card));
        }
    }

    .background-selected {
        background-color: mat.get-color-from-palette($background, selected-button);
    }

    .foreground-active {
        $color: mat.get-color-from-palette(if($is-dark-theme, $accent, $primary));
        color: $color !important;
        * {
            color: $color !important;
        }
    }

    .foreground-primary {
        color: mat.get-color-from-palette($primary);
    }

    .foreground-primary-contrast {
        color: mat.get-color-from-palette($primary, default-contrast);
    }

    .foreground-accent {
        color: mat.get-color-from-palette($accent);
    }

    .foreground-accent-contrast {
        color: mat.get-color-from-palette($accent, default-contrast);
    }

    .foreground-warn {
        $color: mat.get-color-from-palette($warn);
        color: $color !important;
        * {
            color: $color !important;
        }
    }

    .foreground-icon {
        mat-icon {
            color: mat.get-color-from-palette($foreground, icon);
        }
        * {
            color: mat.get-color-from-palette($foreground, text);
        }
        &.active {
            $color: mat.get-color-from-palette(if($is-dark-theme, $accent, $primary));
            color: $color;
            * {
                color: $color;
            }
        }
    }

    .text {
        color: mat.get-color-from-palette($foreground, text);
    }

    .hint {
        color: mat.get-color-from-palette($foreground, secondary-text);
    }

    .svg-primary {
        svg path {
            fill: mat.get-color-from-palette($primary) !important;
        }
    }

    .light-gray-by-theme {
        color: if($is-dark-theme, white, rgba(0, 0, 0, 0.65));
    }

    .divider {
        $divider-color: 1px solid mat.get-color-from-palette($foreground, divider);
        &-bottom {
            border-bottom: $divider-color;
        }
        &-left {
            border-left: $divider-color;
        }
        &-right {
            border-right: $divider-color;
        }
        &-top {
            border-top: $divider-color;
        }
    }

    .assignment-result-table {
        tr {
            border-bottom: 1px solid mat.get-color-from-palette($background, focused-button);
        }
    }

    .sidenav-background {
        background: if($is-dark-theme,  darken(mat.get-color-from-palette($background, background), 0.5%), white);
    }
}
